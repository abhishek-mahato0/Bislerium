@page "/users"
@using CoffeeBucks.models
@using CoffeeBucks.Controllers

<h3>Users</h3>
<div class=" flexbetween">
    <div class="search-container">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
        </svg>
        <input type="text" id="searchInput" class="search-bar" placeholder="Search by name or phonenumber" @oninput="searchUser">
    </div>


    <button type="button" class="flex-row align-items-center justify-content-end px-3 py-1 btn btn-primary hover-effect" @onclick="showAddModal">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
        </svg>Add Users
    </button>
</div>

@if (!string.IsNullOrEmpty(error))
{
    <CoffeeBucks.Components.Layout.Components.Message CustomMessage="@error" OnClose="OnMessageClose" type="error" />
}

@if (!string.IsNullOrEmpty(success))
{
    <CoffeeBucks.Components.Layout.Components.Message CustomMessage="@success" OnClose="OnMessageClose" type="success" />
}


    <table class="table mt-3">
        <thead class="bg-custom text-white">
            <tr>
                <th>S.N</th>
                <th>Name</th>
                <th>UserName</th>
                <th>Role</th>
                <th>Phone</th>
                <th>Created By</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (userList != null)
            {
                @foreach (var item in userList)
                {
                    <tr>
                        <td>@(userList.IndexOf(item) + 1)</td>
                        <td>@item.Name</td>
                        <td>@item.Username</td>
                        <td>@item.role</td>
                        <td>@item.PhoneNumber</td>
                        <td>@(new UserController().getUserById(item.createdBy))</td>
                        <td class=" flex gap-4">
                            <div @onclick="() => showEditModal(item)" class=" cursor-pointer hover-effect">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="blue" class="bi bi-pencil" viewBox="0 0 16 16">
                                    <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                                </svg>
                            </div>
                            <div @onclick="() => showDeleteModal(item)" class=" cursor-pointer hover-effect">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="red" class="bi bi-trash3" viewBox="0 0 16 16">
                                    <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5M11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5" />
                                </svg>
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">No users to show</td>

                </tr>
            }
        </tbody>
    </table>

@if (ShowAddModal)
{
    <div class="modal">
        <div class=" modal-container">
            <div class="modal-header w-full">
                <h2>Add User</h2>
                <div @onclick="hideAddModal" class=" cursor-pointer hover-effect">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                        <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
                    </svg>
                </div>

            </div>
            <div class="modal-body w-full">
            <div class="mb-3 w-full">
                <label for="name" class="form-label">Name</label>
                <input type="text" id="name" class="form-control" @bind="newName" placeholder="Enter name...">
            </div>
              <div class="mb-3 w-full">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" @bind="newUsername" placeholder="Give a user name" />
            </div>
              <div class="mb-3 w-full">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="price" @bind="newPassword" placeholder="*******" />
            </div>
            <div class="mb-3 w-full">
                <label for="phone" class="form-label">Phone Number</label>
                <input type="text" class="form-control" id="price" @bind="newPhone" placeholder="98089786754" />
            </div>
            <div class="mb-3 w-full">
                <label for="role" class="form-label">Role</label>
            <select @bind="newRole" id="role" class=" p-2">
                <option value="admin" class=" p-2">Admin</option>
                <option value="staff" class="p-2">Staff</option>
            </select>
            </div>
            </div>
            <div class="w-full modal-footer">
                <p class="text-danger text-xl-center hover-effect cursor-pointer" @onclick="hideAddModal">Cancel</p>
                <button type="button" class="btn btn-primary hover-effect" @onclick="AddUser">Add</button>
            </div>
        </div>
    </div>
}

@if (ShowEditModal)
{
    <div class="modal">
        <div class=" modal-container">
            <div class="w-full modal-header">
                <h2>Edit USer</h2>
                <div @onclick="hideEditModal" class=" cursor-pointer hover-effect">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                        <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
                    </svg>
                </div>

            </div>
            <div class="modal-body w-full">
            <div class="mb-3 w-full">
                <label for="name" class="form-label">Name</label>
                <input type="text" id="name" class="form-control" @bind="editedUser.Name">
            </div>
            <div class="mb-3 w-full">
                <label for="username" class="form-label">Username</label>
                <input type="string" class="form-control" id="username" @bind="editedUser.Username" />
            </div>
            
            <div class="mb-3 w-full">
                <label for="role" class="form-label">Role</label>
                <select @bind="editedUser.role">
                    <option value="admin">Admin</option>
                    <option value="staff">Staff</option>
                </select>
            </div>
            <div class="mb-3 w-full">
                <label for="phone" class="form-label">Phone Number</label>
                <input type="string" class="form-control" id="phone" @bind="editedUser.PhoneNumber" />
            </div>
            </div>

            <div class="w-full modal-footer">
                <p class="text-danger text-xl-center cursor-pointer hover-effect" @onclick="hideEditModal">Cancel</p>
                <button type="button" class="btn btn-primary hover-effect" @onclick="saveEditedUser">Save</button>
            </div>
        </div>
    </div>
}

@if (ShowDeleteModal)
{
    <div class="modal">
        <div class=" modal-container">
            <div class="w-full modal-header">
                <h2>Delete User</h2>
                <div @onclick="hideDeleteModal" class=" cursor-pointer hover-effect">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                        <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
                    </svg>
                </div>
            </div>
            <div class="modal-body w-full">
            <p class="flex justify-content-start align-content-center"> Are you sure you want to delete ?</p>
            </div>
            <div class="w-full modal-footer">
                <p class="text-danger text-xl-center cursor-pointer hover-effect" @onclick="hideDeleteModal">Cancel</p>
                <button type="button" class="btn btn-danger hover-effect" @onclick="deleteUser">Delete</button>
            </div>
        </div>
    </div>
}

@if (showVerifyPassword)
{
    <div class="modal">
        <div class=" modal-container">
            <div class="modal-header w-full">
                <h2>Verify your password</h2>
                <div @onclick="hideverifyModal" class=" cursor-pointer hover-effect">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                        <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z" />
                    </svg>
                </div>
            </div>
            <div class="modal-body w-full">
                <input type="password" placeholder="password" @bind="password" class=" form-control w-full p-2" />
            </div>
            <div class="modal-footer w-full">
                <p class="text-black text-xl-center cursor-pointer hover-effect" @onclick="hideverifyModal">Cancel</p>
                <button type="button" class="btn btn-danger hover-effect" @onclick="verifyPassword">Verify</button>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    UserController userController = new UserController();
    private List<UserModel> userList = null;
    private string newName;
    private string newUsername;
    private string newPassword;
    private string newPhone;
    private string newRole;
    private string error = "";
    private string success = "";
    private bool loading = false;
    private bool ShowEditModal = false;
    private bool ShowAddModal = false;
    private bool ShowDeleteModal = false;
    private UserModel editedUser = null;
    private CustomMessage message = new CustomMessage();

    private bool showVerifyPassword { get; set; } = false;
    private string password { get; set; }
    private string action { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            userList = await userController.readUserList();
        }
        catch (Exception ex)
        {
            error = ex.Message;

        }
    }
    private void showAddModal()
    {
        showVerifyPassword = true;
        action = "add";
    }
    private void hideAddModal()
    {
        ShowAddModal = false;
    }
    //method for adding new user
    private async Task AddUser()
    {
        try
        {
            if (string.IsNullOrEmpty(newName) || string.IsNullOrEmpty(newPhone))
            {
                error = "Name and phone is required.";
            }
            else if (newPhone.Length != 10)
            {
                error = "Phone numbers should be 10 digits";
            }
            else
            {

                UserModel newUser = new UserModel
                    {
                        Name = newName,
                        PhoneNumber = newPhone,
                        role = newRole,
                        Username = newUsername,
                        Password = newPassword,
                        createdBy = _globalState.CurrentUser.Id

                    };
                message = await userController.addUsers(newUser);
                if (message.success)
                {
                    userList = await userController.readUserList();
                    ShowAddModal = false;
                    success = message.message;
                }
                else
                {
                    ShowAddModal = false;
                    error = message.message;
                }
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private void showEditModal(UserModel user)
    {
        showVerifyPassword = true;
        action = "edit";
        editedUser = new UserModel { Id = user.Id, Name = user.Name, PhoneNumber =user.PhoneNumber, Password=user.Password, Username=user.Username, role=user.role };
    }
    private void hideEditModal()
    {
        ShowEditModal = false;

    }
    //method for updating user
    private async Task saveEditedUser()
    {
        try
        {
            message = await userController.editUser(editedUser);

            if (message.success)
            {
                userList = await userController.readUserList();
                ShowEditModal = false;
                success = message.message;
                editedUser = new UserModel();
            }
            else
            {
                error = message.message;
                ShowEditModal = false;
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private void OnMessageClose()
    {
        success = string.Empty;
        error = string.Empty;
    }

    private void showDeleteModal(UserModel cus)
    {
        showVerifyPassword = true;
        action = "delete";
        editedUser = new UserModel { Id = cus.Id, Name = cus.Name, PhoneNumber = cus.PhoneNumber };
    }
    private void hideDeleteModal()
    {
        ShowDeleteModal = false;
    }
    private void hideverifyModal()
    {
        showVerifyPassword = false;
    }
    //method for deleting user
    private async Task deleteUser()
    {
        try
        {
            message = await userController.deleteUser(editedUser.Id);
            if (message.success)
            {
                userList = await userController.readUserList();
                success = message.message;
                error = string.Empty;
                ShowDeleteModal = false;
            }
            else
            {
                ShowDeleteModal = false;
                error = message.message;
                success = string.Empty;
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }


    }
    //method for searcing user with name
    private void searchUser(ChangeEventArgs eventArgs)
    {
        if (eventArgs.Value != null)
        {
            userList = userController.getUser(eventArgs.Value.ToString());
        }
    }
    private async Task verifyPassword()
    {
        try
        {
            if (await new UserController().verifyPassword(_globalState.CurrentUser.Id, password))
            {
                showVerifyPassword = false;
                password = "";
                if (action == "add")
                {

                    ShowAddModal = true;
                }
                else if (action == "edit")
                {
                    ShowEditModal = true;
                }
                else
                {
                    ShowDeleteModal = true;
                }
            }
            else
            {
                error = "Password does not match";
            }
        }catch (Exception ex)
        {
            error = ex.Message;
        }

    }

}